SHELL := bash
.ONESHELL:
.PHONY: esbuild-bundle esbuild-serve check-format format query-testnet-tip clean build create-bundle-entrypoint delete-bundle-entrypoint update-scripts
.SHELLFLAGS := -eu -o pipefail -c

ps-sources := $(shell fd --no-ignore-parent -epurs)
nix-sources := $(shell fd --no-ignore-parent -enix --exclude='spago*')
js-sources := $(shell fd --no-ignore-parent -ejs -ecjs)
purs-args := "--stash --censor-lib --censor-codes=UserDefinedWarning,ImplicitImport,ImplicitQualifiedImport,ImplicitQualifiedImportReExport"

### Bundler setup

# The main Purescript module
ps-entrypoint := Main
ps-test-entrypoint = Test.Main
# The entry point function in the main PureScript module
ps-entrypoint-function := main
# Whether to bundle for the browser ("1") or the node ("")
# NOTE: bundling for the node is not necessary, see https://github.com/Plutonomicon/cardano-transaction-lib/blob/develop/doc/using-from-js.md
browser-runtime := "" # Use "1" for true and "" for false

raw-scripts-purs := src/TrustlessSidechain/RawScripts.purs
raw-poc-scripts-purs := test/Test/PoCRawScripts.purs

serve-port := 4008

build:
	@spago build --purs-args ${purs-args}

test: src/TrustlessSidechain/RawScripts.purs
	@spago test ${spago-args} -m ${ps-test-entrypoint}


dev: output.js
	@BROWSER_RUNTIME=${BROWSER_RUNTIME} webpack-dev-server --progress

create-bundle-entrypoint:
	@mkdir -p dist/
	@echo 'import("../output/Main/index.js").then(m => m.${ps-entrypoint-function}());' > ./dist/entrypoint.js

create-html-entrypoint:
	@mkdir -p dist/
	@cat << EOF > dist/index.html
	<!DOCTYPE html>
	<html>
	  <body><script type="module" src="./index.js"></script></body>
	</html>
	EOF

delete-bundle-entrypoint:
	@rm -f ./dist/entrypoint.js

esbuild-bundle: build create-bundle-entrypoint
	@mkdir -p dist/
	BROWSER_RUNTIME=${browser-runtime} node esbuild/bundle.js ./dist/entrypoint.js dist/index.js
	@make delete-bundle-entrypoint

esbuild-serve: build create-bundle-entrypoint create-html-entrypoint
	BROWSER_RUNTIME=1 node esbuild/serve.js ./dist/entrypoint.js dist/index.js dist/ ${serve-port}

version: package.json
	./set_version.sh

check-format:
	@purs-tidy check ${ps-sources}
	@eslint ${js-sources}
	@dhall lint --check ${dhall-sources}

format:
	@purs-tidy format-in-place ${ps-sources}
	@eslint --fix ${js-sources}
	@dhall lint ${dhall-sources}

spago2nix:
	@spago2nix generate
	@alejandra spago-packages.nix

update-scripts: ${raw-scripts-purs} ${raw-poc-scripts-purs}

# RawScripts.purs is an autogenerated file that collects all the plutus scripts
# and allows our ctl code to reference them without relying on directory
# structure
${raw-scripts-purs}: ${haskell-scripts}
	@echo 'Generating `$@` with the following command...'
	cd $(onchain-dir) && ${trustless-sidechain-serialise} --purescript-plutus-scripts=${CURDIR}/${raw-scripts-purs}
	@echo 'Updated `$@`.'

# PoCRawScripts.purs is an autogenerated file that collects proof-of-concept
# plutus scripts and allows test ctl code to reference them without relying on
# directory structure
${raw-poc-scripts-purs}: ${haskell-scripts}
	@echo 'Generating `$@` with the following command...'
	cd $(onchain-dir) && ${trustless-sidechain-serialise} --purescript-plutus-poc-scripts=${CURDIR}/${raw-poc-scripts-purs}
	@echo 'Updated `$@`.'

clean:
	@ rm -r .psc-ide-port || true
	@ rm -rf .psci_modules || true
	@ rm -rf .spago || true
	@ rm -rf generated-docs || true
	@ rm -rf .spago2nix || true
	@ rm -rf node_modules || true
	@ rm -rf output || true
	@ rm -rf dist || true
