SHELL := bash
.ONESHELL:
.PHONY: build test update-scripts clean check-format format \
        esbuild-bundle create-bundle-entrypoint delete-bundle-entrypoint
.SHELLFLAGS := -eu -o pipefail -c

ps-sources := $(shell fd --no-ignore-parent -epurs)
nix-sources := $(shell fd --no-ignore-parent -enix --exclude='spago*')
js-sources := $(shell fd --no-ignore-parent -ejs -ecjs)

### Serialization of Plutus on-chain scripts to PureScript

onchain-dir := ../onchain/
trustless-sidechain-serialise=cabal run trustless-sidechain-serialise --
# Haskell source dependencies include shared Prelude libraries and the
# serialization binary
haskell-scripts := $(shell find $(onchain-dir)/src -type f -name "*.hs") \
	                 $(shell find $(onchain-dir)/prelude -type f -name "*.hs") \
                   $(shell find $(onchain-dir)/app/serialise -type f -name "*.hs")
# Output files with serialized scripts
raw-scripts-purs := src/TrustlessSidechain/RawScripts.purs
raw-scripts-rs := ../raw-scripts/src/lib.rs

SPAGO=./node_modules/.bin/spago

### Bundler setup

# The main Purescript module
ps-entrypoint := Main
ps-test-entrypoint = Test.Main
# The entry point function in the main PureScript module
ps-entrypoint-function := main
# Whether to bundle for the browser ("1") or the node ("")
# NOTE: bundling for the node is not necessary, see https://github.com/Plutonomicon/cardano-transaction-lib/blob/develop/doc/using-from-js.md
browser-runtime := "" # Use "1" for true and "" for false

serve-port := 4008

### Build targets
default: ci

npm:
	@npm install

ci: npm test check-raw-scripts
	@make release-zip

build: ${raw-scripts-purs}
	@$(SPAGO) build

test: ${raw-scripts-purs}
	@$(SPAGO) test -m ${ps-test-entrypoint}

update-scripts: ${raw-scripts-purs} ${raw-scripts-rs}

# RawScripts.purs is an autogenerated file that collects all the plutus scripts
# and allows our ctl code to reference them without relying on directory
# structure
${raw-scripts-purs}: ${haskell-scripts}
	@echo 'Generating `$@`...'
	cd $(onchain-dir) && ${trustless-sidechain-serialise} --purescript-plutus-scripts=${CURDIR}/${raw-scripts-purs}
	@echo 'Updated `$@`.'

${raw-scripts-rs}: ${haskell-scripts}
	@echo 'Generating `$@`...'
	cd $(onchain-dir) && ${trustless-sidechain-serialise} --rust-plutus-scripts=${CURDIR}/${raw-scripts-rs}
	@echo 'Updated `$@`.'

create-bundle-entrypoint:
	@mkdir -p dist/
	@echo 'import("../output/Main/index.js").then(m => m.${ps-entrypoint-function}());' > ./dist/entrypoint.js

delete-bundle-entrypoint:
	@rm -f ./dist/entrypoint.js

esbuild-bundle: build create-bundle-entrypoint
	@mkdir -p dist/
	BROWSER_RUNTIME=${browser-runtime} node esbuild/bundle.js ./dist/entrypoint.js dist/pc-contracts-cli
	@make delete-bundle-entrypoint

release-zip: npm esbuild-bundle
	@rm -rf build
	mkdir build
	cp -R node_modules package.json dist ./build
	cd build
	npm prune --offline --cache node_modules --omit=dev --ignore-scripts
	chmod +x ./dist/pc-contracts-cli
	zip -r release.zip ./package.json ./node_modules
	zip -j release.zip ./dist/pc-contracts-cli
	@rm -rf ./{dist,node_modules,package.json,package-lock.json}

check-raw-scripts:
	@make -B update-scripts
	@if ! git diff --quiet -- src/TrustlessSidechain/RawScripts.purs ; then \
	  echo
	  echo "Error: RawScripts.purs is not up to date"; \
	  echo
	  exit 1; \
	fi
	@if ! git diff --quiet -- ../raw-scripts/src/lib.rs ; then \
	  echo
	  echo "Error: raw-scripts/src/lib.rs is not up to date"; \
	  echo
	  exit 1; \
	fi

check-format:
	@purs-tidy check ${ps-sources}
	@eslint ${js-sources}
	@dhall lint --check ${dhall-sources}

format:
	@purs-tidy format-in-place ${ps-sources}
	@eslint --fix ${js-sources}
	@dhall lint ${dhall-sources}

clean:
	@ rm -r .psc-ide-port || true
	@ rm -rf .psci_modules || true
	@ rm -rf .spago || true
	@ rm -rf generated-docs || true
	@ rm -rf .spago2nix || true
	@ rm -rf node_modules || true
	@ rm -rf output || true
	@ rm -rf dist || true
