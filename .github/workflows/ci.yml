name: 'Partner Chains Smart Contracts CI'
on:
  pull_request:
  push:
    branches:
      - master
  workflow_dispatch:

env:
  AWS_DEFAULT_REGION: eu-central-1

jobs:
  build:
    permissions:
      id-token: write
      contents: read
    strategy:
      matrix:
        os: [nixos, macos]
    runs-on:
      - self-hosted
      - ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ github.token }}

      - name: Add signing key for nix
        run: echo "${{ secrets.NIX_SIGNING_KEY }}" > "${{ runner.temp }}/nix-key"

      - name: Run nixci to build all outputs
        run: |
          nix run github:srid/nixci -- -v build -- --fallback > ${{ runner.temp }}/outputs

      - name: Acquire AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Copy nix scopes to cache
        run: |
          nix-store --stdin -q --deriver < ${{ runner.temp }}/outputs | nix-store --stdin -qR --include-outputs \
          | nix copy --stdin --to \
          "s3://cache.sc.iog.io?secret-key=${{ runner.temp }}/nix-key&region=$AWS_DEFAULT_REGION"

  test-pc-devshells:
    strategy:
      matrix:
        os: [nixos, macos]
    runs-on:
      - self-hosted
      - ${{ matrix.os }}
    needs:
      - build
    steps:
      - name: Checkout partner-chains
        uses: actions/checkout@v4
        with:
          repository: input-output-hk/partner-chains

          ref: master
      - name: Override flake.lock input
        run: |
          nix flake lock --update-input trustless-sidechain \
          --override-input trustless-sidechain \
          github:input-output-hk/partner-chains-smart-contracts/${{ github.sha }}
      - name: Test build nix outputs
        run: |
          nix run github:srid/nixci -- -v build -- --fallback

  tests:
    permissions:
      id-token: write
      contents: read
    strategy:
      matrix:
        os: [nixos, macos]
    runs-on:
      - self-hosted
      - ${{ matrix.os }}
    needs:
      - build
      - test-pc-devshells
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ github.token }}
      - name: Run Unit/integration tests for linux
        if: matrix.os == 'nixos'
        run: nix build .#check.x86_64-linux -L --fallback
      - name: Run Unit/integration tests for macos
        if: matrix.os == 'macos'
        run: nix build .#check.aarch64-darwin -L --fallback
