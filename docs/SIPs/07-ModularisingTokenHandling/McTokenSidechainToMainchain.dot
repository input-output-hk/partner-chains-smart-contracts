strict digraph {
  node [shape=record]
  graph [nodesep="1", ranksep="1"]

  DistributedSetNode [ label = "Distributed set node"];
  MerkleRoot [ label = "Merkle root of `MerkleTreeEntry`s"];

  InputLockBoxValidator1 [label = "LockBoxValidator with datum `McToken`"];
  InputLockBoxValidator2 [label = "LockBoxValidator with datum `McToken`"];
  InputLockBoxValidator3 [label = "LockBoxValidator with datum `McToken`"];

  OutputLockBoxValidator1 [label = "LockBoxValidator with datum `McToken`"];
  OutputLockBoxValidator2 [label = "LockBoxValidator with datum `McToken`"];
  OutputLockBoxValidator3 [label = "LockBoxValidator with datum `McToken`"];

  UnlockMintingPolicy [shape = ellipse ] ;
  BurnAddress ;

  Transaction [ shape=diamond ];

  DistributedSetNode1 [ label = "Distributed set node 1"];
  DistributedSetNode2 [ label = "Distributed set node 2"];

  Recipient [ label = "Recipient receives their `McToken`" ];

  MerkleRoot -> Transaction [label = "reference input"];
  DistributedSetNode -> Transaction [label = "input"];

  InputLockBoxValidator1 -> Transaction [label = "input"];
  InputLockBoxValidator2 -> Transaction [label = "input"];
  InputLockBoxValidator3 -> Transaction [label = "input"];

  Transaction -> OutputLockBoxValidator1 [label = "output"];
  Transaction -> OutputLockBoxValidator2 [label = "output"];
  Transaction -> OutputLockBoxValidator3 [label = "output"];
  Transaction -> DistributedSetNode1 [label = "output"];
  Transaction -> DistributedSetNode2 [label = "output"];
  Transaction -> Recipient [ label = "output" ];
  Transaction -> UnlockMintingPolicy [ label = "mints", style=dashed ];
  UnlockMintingPolicy -> BurnAddress[ label = "is paid to", style=dashed ];
}
