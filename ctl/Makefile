SHELL := bash
.ONESHELL:
.SHELLFLAGS := -eu -o pipefail -c
.PHONY: dev build test check-format update-scripts format spago2nix

BROWSER_RUNTIME ?= 1

ps-sources := $(shell fd -epurs)
js-sources := $(shell fd -ejs)
dhall-sources := $(shell fd -edhall)
plutus-scripts := $(wildcard Scripts/*.plutus)

ps-entrypoint := Main
ps-test-entrypoint := Test.Main

dev: output.js
	@BROWSER_RUNTIME=${BROWSER_RUNTIME} webpack-dev-server --progress

build: output.js
	@BROWSER_RUNTIME=${BROWSER_RUNTIME} webpack --mode=production

test: src/RawScripts.purs
	@spago test -m ${ps-test-entrypoint}

check-format:
	@purs-tidy check ${ps-sources}
	@eslint ${js-sources}
	@dhall lint --check ${dhall-sources}

format:
	@purs-tidy format-in-place ${ps-sources}
	@eslint --fix ${js-sources}
	@dhall lint ${dhall-sources}

spago2nix:
	@spago2nix generate
	@nixpkgs-fmt spago-packages.nix

update-scripts: touch-scripts src/RawScripts.purs
touch-scripts:
	@[ "${plutus-scripts}" ] || {
		echo 'Please first run `cabal run trustless-sidechain-serialise`'
		exit 1
	}
	touch ${plutus-scripts}

output.js: src/Main.purs src/RawScripts.purs
	@spago bundle-module -m ${ps-entrypoint} -t $@

main.js: src/Main.purs src/RawScripts.purs
	@spago bundle-app -m ${ps-entrypoint} -t $@

# RawScripts.purs is an autogenerated file that collects all the .plutus scripts
# and allows our ctl code to reference them without relying on directory
# structure
src/RawScripts.purs: ${plutus-scripts}
	@>$@
	@{
	echo '-- WARNING: This file is autogenerated. Do not modify by hand. Instead:'
	echo '-- › Add your updated scripts to $$project/app/serialise/Main.hs'
	echo '-- › On $$project dir, invoke `cabal run trustless-sidechain-serialise`'
	echo '-- › You can then manually run `make update-scripts`, but `make build` etc.. auto-updates this file'
	echo
	echo 'module RawScripts'
	leading='('
	for script in ${plutus-scripts}; do
		echo "  $$leading raw$$(basename $$script | sed 's/.plutus$$//')"
		leading=','
	done
	echo '  ) where'
	echo
	for script in ${plutus-scripts}; do
		name=raw$$(basename $$script | sed 's/.plutus$$//')
		jq -c . $$script \
		| sed 's/.*/  """&"""\n/' \
		| sed "1i $$name =" \
		| sed "1i $$name ∷ String"
	done
	} | sed '$$d' >> $@
	@echo 'Updated $@'

# Check that the script is newer than the haskell source file of the same name
# This errors rather than depending on a haskell binary in ../
# Invariant: Plutus scripts must correspond in name to Haskell files.
#            If this cannot be maintained, we can rely on other means to detect
#            freshness (oldest script to newest haskell file).
Scripts/%.plutus: ../src/TrustlessSidechain/OnChain/%.hs
	@echo Please update your plutus scripts by running 'cabal run trustless-sidechain-serialise'
	@echo on the project root.
	@exit 1
