-- Functions to serialise plutus scripts into a purescript readable TextEnvelope.textEnvelope
-- This should (only) be called when the scripts are modified, to update ctl scripts
module Main (main) where

import Cardano.Api (PlutusScriptV2, writeFileTextEnvelope)
import Cardano.Api.Shelley (PlutusScript (PlutusScriptSerialised))
import Codec.Serialise (serialise)
import Data.Bifunctor qualified as Bifunctor
import Data.ByteString.Lazy (toStrict)
import Data.ByteString.Short (toShort)
import Data.Foldable (traverse_)
import Ledger (Script, Versioned (unversioned), scriptHash)
import Plutonomy.UPLC qualified
import System.FilePath qualified as FilePath
import TrustlessSidechain.CommitteeCandidateValidator qualified as CommitteeCandidateValidator
import TrustlessSidechain.DistributedSet qualified as DistributedSet
import TrustlessSidechain.FUELMintingPolicy qualified as FUELMintingPolicy
import TrustlessSidechain.MPTRootTokenMintingPolicy qualified as MPTRootTokenMintingPolicy
import TrustlessSidechain.MPTRootTokenValidator qualified as MPTRootTokenValidator
import TrustlessSidechain.PoCECDSA qualified as PoCECDSA
import TrustlessSidechain.PoCInlineDatum qualified as PoCInlineDatum
import TrustlessSidechain.PoCReferenceInput qualified as PoCReferenceInput
import TrustlessSidechain.PoCReferenceScript qualified as PoCReferenceScript
import TrustlessSidechain.PoCSerialiseData qualified as PoCSerialiseData
import TrustlessSidechain.UpdateCommitteeHash qualified as UpdateCommitteeHash
import Prelude

-- imports for grabbing CLI arguments

import Data.List qualified as List
import System.Console.GetOpt (
  ArgDescr (NoArg, ReqArg),
  ArgOrder (RequireOrder),
  OptDescr (Option),
 )
import System.Console.GetOpt qualified as GetOpt
import System.Environment qualified as Environment
import System.IO.Error qualified as Error

-- * CLI parsing

-- | 'Options' is the CLI options that may be passed to the system.
data Options
  = -- | 'GenPlutusScripts'
    GenPlutusScripts
      { -- | 'oOutputDir' is the output directory of where the plutus scripts
        -- are dumped.
        gsOutputDir :: FilePath
      }
  | -- | 'PlutusScriptTargets' returns the names of the files generated by
    -- 'GenPlutusScripts'.
    PlutusScriptTargets

{- | 'getOpts' is a high level function to convert the CLI arguments to
 'Options'
-}
getOpts :: IO Options
getOpts =
  Environment.getProgName >>= \progName ->
    Environment.getArgs >>= \argv ->
      let header =
            List.unwords
              [ "Usage:"
              , progName
              , "[OPTION...]"
              ]
       in case GetOpt.getOpt RequireOrder options argv of
            ([o], [], []) -> return o
            (_, _nonOptions, errs) ->
              Error.ioError $
                Error.userError $
                  concat errs
                    ++ GetOpt.usageInfo header options
  where
    options :: [OptDescr Options]
    options =
      [ Option
          ['o']
          ["plutus-scripts-output-dir"]
          (ReqArg (\str -> GenPlutusScripts {gsOutputDir = str}) "DIR")
          "output directory of Plutus scripts"
      , Option
          ['p']
          ["plutus-scripts-targets"]
          (NoArg PlutusScriptTargets)
          "output the filenames of the plutus scripts to be generated"
      ]

-- * CTL serialization

-- CTL uses the usual TextEnvelope format now.
serialiseScript :: FilePath -> FilePath -> Versioned Script -> IO ()
serialiseScript outputDir name script =
  -- Plutonomy.UPLC.optimizeUPLC
  let out =
        PlutusScriptSerialised @PlutusScriptV2
          . toShort
          . toStrict
          . serialise
          . Plutonomy.UPLC.optimizeUPLC
          $ unversioned script
      file = outputDir FilePath.</> name
   in do
        putStrLn $ "serialising " <> file <> ",\thash = " <> show (scriptHash script)
        writeFileTextEnvelope file Nothing out >>= either print pure

-- * Main function
main :: IO ()
main =
  getOpts >>= \options ->
    let plutusScripts =
          map
            (Bifunctor.first (FilePath.<.> "plutus"))
            [ ("FUELMintingPolicy", FUELMintingPolicy.serialisableMintingPolicy)
            , ("MPTRootTokenValidator", MPTRootTokenValidator.serialisableValidator)
            , ("MPTRootTokenMintingPolicy", MPTRootTokenMintingPolicy.serialisableMintingPolicy)
            , ("CommitteeCandidateValidator", CommitteeCandidateValidator.serialisableValidator)
            , ("CommitteeHashPolicy", UpdateCommitteeHash.serialisableCommitteeHashPolicy)
            , ("CommitteeHashValidator", UpdateCommitteeHash.serialisableCommitteeHashValidator)
            , -- Distributed set validators / minting policies
              ("InsertValidator", DistributedSet.serialisableInsertValidator)
            , ("DsConfValidator", DistributedSet.serialisableDsConfValidator)
            , ("DsConfPolicy", DistributedSet.serialisableDsConfPolicy)
            , ("DsKeyPolicy", DistributedSet.serialisableDsKeyPolicy)
            , -- Validators for proof of concept tests.
              ("PoCInlineDatum", PoCInlineDatum.serialisablePoCInlineDatumValidator)
            , ("PoCToReferenceInput", PoCReferenceInput.serialisablePoCToReferenceInputValidator)
            , ("PoCReferenceInput", PoCReferenceInput.serialisablePoCReferenceInputValidator)
            , ("PoCToReferenceScript", PoCReferenceScript.serialisablePoCToReferenceScriptValidator)
            , ("PoCReferenceScript", PoCReferenceScript.serialisablePoCReferenceScriptValidator)
            , ("PoCSerialiseData", PoCSerialiseData.serialisablePoCSerialiseData)
            , ("PoCECDSA", PoCECDSA.serialisableValidator)
            ]
     in case options of
          GenPlutusScripts outputDir -> traverse_ (uncurry (serialiseScript outputDir)) plutusScripts
          PlutusScriptTargets -> putStrLn $ List.unwords $ map fst plutusScripts
